-- name: test_wls

drop database if exists wls_test_db;
create database wls_test_db;
use wls_test_db;

drop table if exists wls_test_tbl;
create table wls_test_tbl
(
    `treatment` boolean,
    `numerator` double,
    `denominator` boolean,
    `numerator_pre` bigint,
    `denominator_pre` boolean,
    `Y` double,
    `X1` int,
    `X2` int,
    `X3` int,
    `X3_string` string,
    `X7_needcut` bigint,
    `X8_needcut` bigint,
    `weight` double,
    `distance` double
)
properties (
    "replication_num"="1"
);

shell: curl --location-trusted -u root: -T ${root_path}/lib/../common/data/stream_load/all_in_sql_test.csv -XPUT -H column_separator:, ${url}/api/wls_test_db/wls_test_tbl/_stream_load
sync;

select count(*), floor(sum(`numerator`)), floor(sum(`Y`)) from wls_test_tbl;

select wls(Y, [X1, X2, X3], weight, false) from wls_test_tbl;

select wls(Y, [X1, X2, X3], weight, true) from wls_test_tbl;

select wls_train(Y, [X1, X2, X3], weight, false) as params from wls_test_tbl;

select wls_train(Y, [X1, X2, X3], weight, true) as params from wls_test_tbl;

with model as (
    select wls_train(Y, [X1, X2, X3], weight, false) as params
    from wls_test_tbl
)
select round(avg(eval_ml_method(model.params, [X1, X2, X3])), 5) from wls_test_tbl, model;

with model as (
    select wls_train(Y, [X1, X2, X3], weight, true) as params
    from wls_test_tbl
)
select round(avg(eval_ml_method(model.params, [X1, X2, X3])), 5) from wls_test_tbl, model;
